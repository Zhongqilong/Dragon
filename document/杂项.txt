Forward
在Forward渲染路径下，每个物体会被每个光源渲染成一个“通道”，因此物体受到越多灯光的影响，其渲染次数就会越多。
Forward渲染路径的优势在于，在灯光比较少的情况下，Forward方式的渲染速度会非常快，处理透明贴图也非常快，还可以使用诸如“多重取样抗锯齿（MSAA）”这样的硬件处理技术技术。
但Forward渲染路径的渲染速度会随着灯光的增多而迅速变慢，在一些有很多灯光照明的特定场景中（比如高科技室内环境）并不适合使用Forward渲染路径。

Deferred
使用Deffered渲染路径，渲染时间不会随着灯光的增多而提高，而是会随着受整体光照影响区域的扩大而提高（也就是说，场景中越多像素被照亮，渲染速度就越慢，但全屏被照亮的情况下，灯光设置复杂度不会进一步影响渲染速度了）。
Deffered渲染路径在整体上需要更多的计算量，对于一些移动设备，Deffered渲染路径还不能支持。
新版Unity3D的默认渲染路径是Deffered渲染，如果场景非常简单，或者希望使用MSAA，可以自行修改成Forward渲染路径。

使用反射探针（Reflection Probe）
Unity3D中并没并真实的Raytrace反射，而是通过反射贴图来模拟所有的反射效果。
如果我们在场景中放置一个非常强反射的小球，我们就能看到这个小球上实际反射的是我们的Skybox，完全不会反射场景物体。这样一来不仅影响到场景中反光物体的反射正确性，同时也会严重影响整体场景的光照准确性。
我们可以为场景添加Reflection Probe来矫正不正确的反射贴图。
Reflection Probe可以看做是一个带有6个摄影机的点，它会渲染该点的6个方向（前后左右上下），将渲染结果拼成一个Cubemap，并应用给一个特定方框范围内的所有物体作为反射贴图。
对于比较复杂的环境，比如有多个区域的大房间，我们可以放置多个Reflection Probe并手动设置其影响范围。
Reflection Probe默认不会计算动态物体，仅计算烘焙物体，我们可以修改属性让其将动态物体也包括在内，同时还可以修改属性为Every Frame使其每帧更新以准确反射动态物体的运动过程，还可以增加Lighting Setting中的Reflection Bounces提高反射次数（这样就不会出现强反射物体在另一个反射物体中是黑色的情况了）。但要注意，这些修改都会占用更多的系统资源，尤其是每帧更新反射贴图这样的设置。

如何提高烘焙效率
烘焙效率虽然不影响最终游戏的表现，但对我们制作过程有很大的影响。没人会希望每次修改了场景布局或者灯光布局之后都要花费几个小时甚至几十个小时的时间来烘焙光照贴图。
一个小技巧是不要将所有物体都设置成Lightmap Static参与光照贴图的烘焙。很多细碎的物体（比如地上的小碎石）并不需要很精确的间接光照效果，而且也可能根本没有足够的光照贴图精度来对应这些细碎物体，这时候用灯光探针可能比用光照贴图更有效率。
在Unite 2017关于灯光烘焙的专场演讲中，演讲者通过将细小物体设置为动态物体，并添加简单的Light Probe，让渲染时间从3.5分钟下降到20秒。

OpenGL ES 图形管线
API获得顶点数据，将顶点数据从内存中拷贝至顶点缓冲区（显存）
拿到数据之后，通过attribute通道传递至顶点着色器，同时，纹理坐标通过Texture通道传递到顶点着色器和片元着色器
然后，图元装配，即图元的连接方式，一共有9种，常用的有6种，此步骤将顶点变换为图形
光栅化：确定图形与屏幕对应的位置
片元/片段/像素着色器：处理对应像素点的颜色值
在将处理好的每个像素点的颜色值存储到帧缓存区，然后在显示器中显示
API：可以通过API操作顶点缓冲区、顶点着色器、纹理坐标、片段着色器

混合光照模式(Mixed Lighting)
Unity里每盏灯光默认的烘焙模式都是”Realtime”，这代表这些灯光仍然会照亮你的场景，Unity的realtime GI系统会处理间接光。但如果默认的烘焙模式是”Baked”，那么这些灯光将会透过Unity的烘焙GI系统处理直接光源和间接光源，产生出来的光照贴图一旦贴到场景上在执行期间是不能改变的。选择烘焙模式为”Mixed”的话，场景内的静态对象会被烘焙GI拿去做计算，然而，不像”Baked”模式，混合模式的灯光仍会继续运算即时光源到非静态对象上，这对于你想把静态环境烘成光照贴图，但同时又希望同样一盏灯能为会动的角色计算阴影很有帮助。
改变模式为Baked，当烘焙完成后，灯光就可以删除了，已经将光照贴图赋给了游戏物体，灯光的作用已经消失了。

subtractive，在这种模式下的光照对于 动态物体只显示一个灯光阴影效果（下图左立方体，右边立方体为静态，有两个阴影）。
ShaderMask，对于动态和静态物体能都能显示完整的阴影效果。
将Shadow Mask设置为Distance Shadowmask即可使物体受其他物体的阴影影响
Baked Indirect，只烘焙间接光，其余情况均为RealTime，是最高级的模式，但当场景中距离大于Quality界面中的Shadow Distance时，所有阴影都不予显示。

很多客户给我们反馈，现在使用轻量级渲染管线LWRP，最欠缺的是二个功能：
首先是目前还未支持的Shadow Mask，这在老的内置渲染管线里已经有了。我们计划在Unity 2019.3提供Shadow Mask的功能。
其次是延迟渲染Deferred Rendering，它在老的管线有，新渲染管线没有，它也会在Unity 2019.3提供。

粒子系统的使用数量过大，从而导致其内存占用过高。对此，其最有效的优化方法还是降低粒子系统的使用数量，目前仍然建议将其数量控制在600个以下。建议研发团队后续对粒子系统的数量（特别是特效中的缓存）密切关注。

MMORPG手游的Draw Call数量普遍较高，且设备性能越好，数量峰值越高。这主要有以下几方面原因：
1）研发团队普遍开始针对不同机型来制定自适应的渲染LOD策略，主要包括模型LOD和Shader LOD等。
2）除LOD外，研发团队同样会对一些渲染效果进行有针对性的设置，最常见的是阴影的处理，高端机上开启实时阴影，而低端机上则通过较为简单的阴影面片或Projector来处理。另外，水体模拟也越来越多地在项目中被使用，高端设备上开启水面反射效果，也会增加一定量的Draw Call。
但就目前数据表明，研发团队已经开始有意地对Draw Call进行控制，UWA建议Draw Call占用的P95 < 200。

粒子系统的CPU开销普遍较低，且总体使用数量峰值在2018年后大幅降低。但我们依然建议研发团队尽可能将数量峰值控制在600以下。对此，建议研发团队经常通过以下两方面来检测自己的粒子特效使用情况：
1）粒子系统（特别是技能特效）的配置文件是否过量；
2）特效中是否含有长久不用的粒子系统。

GPU Instancing
批渲染Mesh相同的那些物体，以降低DrawCall数，这些物体可以有不同的参数，比如颜色与缩放

GPU Instancing与静态批处理，动态批处理的区别
使用静态，动态批处理物体的材质的所有参数是相同的，因为使用Renderer.sharedMaterial修改参数，则所有物体都会受影响。而使用Renderer.material会生成新实例，没法进行批处理
使用GPU Instancing的同一类物体的材质对象相同，但可以在代码中通过接口设置不同的参数，但仍会被批渲染。

1.不同材质的阴影会动态合批，只要绘制阴影的 pass是相同的，因为阴影跟其他贴图等数据无关
2.目前,只有 Mesh Renderers, Trail Renderers, Line Renderers, Particle Systems和Sprite Renderers支持合批处理，而skinned Meshes，Cloth和其他类型的渲染组件不支持合批处理。
3.渲染器仅与其他相同类型的渲染器进行合批处理。
4.对于半透明的GameObject，按照从前到后的顺序绘制，Unity首先按这个顺序对GameObjects进行排序，然后尝试对它们进行批处理，但由于必须严格满足顺序，这通常意味着对于半透明的材质更少使用合批处理。
5.手动的合并GameObject是代替合批处理的好办法，比如使用Mesh.CombineMeshes，或者直接在建模时将多个网格合并成单个网格。

静态批处理
原理：在Build的时候Unity会自动地提取这些共享材质的静态模型的Vertex buffer和Index buffer。将这些模型的顶点数据变换到世界空间下，存储在新构建的大Vertex buffer和Index buffer中。并且记录每一个子模型的Index buffer数据在构建的大Index buffer中的起始及结束位置。绘制的时候一次行提交合并模型的顶点数据，根据每个的，模型的可见性，调用多次DC，但是只改变一次渲染状态，之前的DC命令在Command Buffer缓存中
优点：减少CPU压力和时间
缺点：包体变大，内存变大；


动态批处理：
原理：在进行场景绘制之前将所有的共享同一材质的模型的顶点信息变换到世界空间中，然后通过一次Draw call绘制多个模型，达到合批的目的。模型顶点变换的操作是由CPU完成的，所以这会带来一些CPU的性能消耗。并且计算的模型顶点数量不宜太多，否则CPU串行计算耗费的时间太长会造成场景渲染卡顿，所以Dynamic batching只能处理一些小模型。
限制：1.材质相同
2.最高支持900个顶点属性，也就是最大300个顶点；
3.多Pass的shader会中断批处理。
4.在unity5后，动态批处理对于模型缩放的限制已经不存在了。
5.使用光照纹理的物体需要小心处理。为了让这些物体可以被动态批处理，需要保证它们指向光照纹理中的同一位置

然后xLua本身也提供了删除引用的处理LuaEnv.Tick()函数（慢慢遍历检测，引用的C#对象是否销毁，已销毁了就置null，可以解引用，后面GC就会被GC掉）调用了，且提高每次遍历的数目。

C#栈可以通过StackTraceUtility.ExtractStackTrace()拿到；
Lua栈可以通过DoString(“return debug.traceback()”)拿到；
可以把这两个字符串和obj一起记录在ObjectPool里，这样只要知道是哪个obj泄露了，也就顺便知道是哪里引入的了。

Q：想对UGUI渲染优化，发现这个问题。例如一个界面的Scrollview有很多Item，发现当UI根节点的Z为0时，会合批处理。当Z不为0的时候，Item会一个一个地绘制出来，没有合批处理。求大佬给萌新科普一下，遇见这种情形应该怎么处理比较好？谢谢啦！
A：“UI元素Position的Z值不为0时，会被视为3D UI，不参与合批。父节点Z != 0，则下面的元素都无法合批了。”


最近手上的游戏2D序列帧用得比较多， 此时使用ETC2和PVRTC因为压缩的原因，会产生闪的问题。使用拆Alpha通道的方式可以一定程度上避免，特别是对于带Alpha通道的图，ETC2质量低的原因大半在于对Alpha的压缩。
ASTC的质量是明显好于PVRTC的，iPhone上唯一的问题是iPhone 5s的支持。我们的方案是，如果机型不支持ASTC，会额外准备一份低质量的PVRTC的资源，尺寸是原图的一半，而设计的主要目的是解决内存问题，顺带解决iPhone 5s的压缩问题。
如果GameObject销毁了，但其Component仍然在不断存在，且不断上升，很有可能是你的的Lua导致了泄露。
通过Inspector里面的Show Generated Code按钮查看编译后的代码
Q：游戏在其他手机上都正常，但是在小米MIX 2上面默认右边有黑条，需要在手机上开启全面屏设置，但是有一些游戏我没有手动设置也是正确的。请问这个如何默认开启全面屏设置？

A：在AndroidManifest.xml声明max_aspect值
由于全面屏手机的高宽比比之前大，如果不适配的话，Android默认为最大的宽高比是1.86，小于全面屏手机的宽高比，因此，在全面屏手机上打开部分App时，上下就会留有空间，显示为黑条。这样非常影响视觉体验，另外全面屏提供的额外空间也没有得以利用，因此，这样的应用需要做相关适配。
针对此问题，Android官方提供了适配方案，即提高App所支持的最大屏幕纵横比，实现起来也比较简单，在AndroidManifest.xml中做如下配置即可：
< meta-data android:name=“android.max_aspect” android:value=“ratio_float”/ >
其中ratio_float为浮点数，官方建议为2.1或更大，因为18.5:9=2.055555555……，如果日后出现纵横比更大的手机，此值将需要设为更大。
因此，建议开发者在自己App AndroidManifest的Application标签下面增加下面一段代码：
< meta-data android:name=“android.max_aspect” android:value=“2.1” / >

Unity很多内置继承自UnityEngine.Object的对象如Texture、Component等，有C#和C++ 两部分内容。
以Texture为例，C#这边就是一个Wrapper，真正的纹理数据在C++ 那边。当主动执行Resources.Unlaod之后，C++ 部分被销毁，但是C#部分由于被static容器引用没有得到释放，就会造成泄露。
查询泄露简单的办法就是在ObjectTranslator中找到相关容器进行遍历，如果发现：
if(obj == null && (obj as System.Object != null))
那么就可以认为C++层已经被销毁，但是C#还在残留，也就是泄露了。原理参考：UnityEngine.Object里的迷之null（http://qiankanglai.me/2016/10/21/fake-null/）。

在C#层，做一个tick逻辑，每帧检查ObjectTranslator中的objects中的一部分对象，如果是Unity.GameObject类型的，查看其是否等于null，如果作为Unity.GameObject对象是null，而作为System.Object对象不是null，说明这个对象已经被Unity标记为销毁了，Unity.GameObject重载的==运算符让游戏逻辑认为它是空的，这时候C#对象可以提前销毁掉，因为即便Lua层想访问它，也已经会报错了。
http://www.manew.com/forum.php?mod=viewthread&tid=141722

CommandBuffer作用就是在相机渲染的某个阶段，再另外执行自己的额外渲染，至于渲染的结果就看我们怎么用了。

在设备上Shader的加载其实并不慢，通常慢在编译上，也就是Warmup做的事情。因为不同设备GPU以及驱动不一样，因此手游上的Shader是没办法在打包的时候编译的，这就需要到设备上进行编译。（说到这个，我其实也不是很清楚在打包过程中观察到的Shader编译是在干嘛。大约是把Unity自己的Shader格式转换成目标平台的Shader格式，比如：GLSL等，这也的确是一种编译。）ShaderVariantCollection要能够有针对性地提预热（提前编译）Shader，自然是要在打包的时候根据需求收集可能用到的变体，这就和打包有了关系。至于编译，就像前面所说，打包时需要转换，到设备上才真正编译Shader。

动画从FBX中切成独立的.anim文件后，这是一个从只读动画变成可读写动画的过程。
独立的动画文件和最终发布的动画文件数据格式是不一样的，Unity会在打包的时候进行转换。在编辑器中运行游戏，如果使用的是FBX中的动画文件，Unity是直接加载最终发布形态的动画序列化数据，这些数据是在FBX导入到工程中就生成好了的，所以很快。如果使用的是独立的.anim文件，Unity加载的是这个动画源文件，需要进行数据格式转换，而文本格式的序列化文件进行反序列化时，也是极慢的，加上在Animation编辑器编辑并保存动画后，Unity还会插入原有数据量的3倍到这个动画文件中去，这也极大地拖慢了动画文件的加载速度。


项目用Xlua，发现一个问题：
一个UI（多些文字就容易复现）打开、销毁、再打开、再销毁…，如此多次，Mono会不停的增长，C# GC也不能完全GC掉。
然后发现一个会降下来的现象：
Lua GC一下，C#再GC Mono会降回去一点（但也回不到最初）。这个问题应该是两者都用了引用计数来回收， 两者不同步， 虽然Destory了对象，Lua里还没GC到，则一些被Lua引用的对象等也还在引用着。
然后两边来回GC几次，基本可以回到原来的Mono值。
网上看到类似问题，是ToLua的：
http://www.manew.com/forum.php?mod=viewthread&tid=141722&extra=page%3D&page=1

里面提了几个方案。做了2个调整：
（1）尝试Lua GC频率稍微调高些；
（2）然后XLua本身也提供了删除引用的处理LuaEnv.Tick()函数（慢慢遍历检测引用的C#对象是否销毁，已销毁了就置null，可以解引用，后面GC就会被GC掉）调用了，且提高每次遍历的数目。
但还是有增长的情况，不知大家如何解决这类问题的？谢谢！（UI做缓存池会好一些吧？但还是有一定概率会出问题，撑大Mono的）
PS：还有一点觉得难受，Lua和C#里泄漏的东西，很难知道到底当时是什么地方造成泄漏的。必须短时间内重复一些简单操作，才能推测大概泄漏的是什么东西，然后去对应地方找问题。
有什么可以方便定位哪个Lua的地方应用了哪个C#的地方？或者 C#引用了Lua的哪个地方？
比如有一些双向引用了，GC不掉，只能推测大概是哪里和哪里引用了。
A：题主对Lua和C#内存这块理解已经非常深刻了，我们也有类似问题，我们只做了第一个处理：
调整Lua GC的两个参数，让Lua垃圾回收更加积极，这个问题的原因是Lua这一端无法感知一个小小的UserData代表的东西在C#世界的分量，根基都错了只能无脑加快频率，这是最简单有效的办法了，参数合理代价也并不大。
关于撑大Mono的问题，我们应该也有，还没细抠这一块。目前正常操作，Mono峰值20几兆，就先没有管。
关于Lua引用C#，Lua这边只是拿一个索引，真正的对对象的持有是通过ObjectPool来实现的，接下来针对ObjectPool做手脚即可，分两步：
（1）记录调用栈
C#栈可以通过StackTraceUtility.ExtractStackTrace()拿到；
Lua栈可以通过DoString(“return debug.traceback()”)拿到；
可以把这两个字符串和obj一起记录在ObjectPool里，这样只要知道是哪个obj泄露了，也就顺便知道是哪里引入的了。
（2）记录分配号
为了查哪个obj泄露了，可以在obj入池的时候给它一个分配号，这个分配号自增，然后我们就可以打点diff了。
比如在某一刻打点A，此时的分配号是100，在另一刻打点B，此时的分配号是150，然后一顿各种GC释放，遍历池子找出100到150之间的obj，重点分析这一部分obj的存活是否符合预期，不符合预期的把两个栈打印出来即可。
关于C#引用Lua，这块似乎并不是重灾区，我们封装了LuaBehaviour对外使用，销毁的时候控制好，另外还有delegate也做好控制，其它的暂时没有想到。

https://mp.weixin.qq.com/s/5MH6_M3sC3RvoLal500Lqw

shader
ShaderVariantCollection https://www.cnblogs.com/wbaoqing/p/9680337.html
1.把Shader放到在ProjectSetting->Graphics->Always Include Shaders列表里,Unity就会编译所有的组合变种。
2.把Shader放到Resources文件夹下,也会正确处理,我猜也应该是全部keyword组合都编译,有知道的同学,麻烦留言告诉我。


A2：现在tx新上线的项目已经开始普及ASTC的使用了，所以全面选择ASTC，2019可以默认import的时候选择ASTC，尤其是对光照贴图和法线有很好的效果。Unity现在默认是6x6，也可以根据项目选择其它大小。
模拟器虽然是opengles3，但是可能不支持astc etc2，硬件支持软件，虽然不支持astc etc2，但是可以运行指示帧数比较低。

1）使用Tiled模式的Image组件：Tiled模式的Image组件可能产生过多的面片，建议进一步检查。
2）精度过高的动画片段：建议把精度缩减到3－4位，从而降低动画片段的内存占用。
3）未使用PCM格式的音频：未使用PCM格式的音频可能存在音质问题，建议进一步检查。
4）Wrap模式为Repeat的纹理：Wrapmode使用了Repeat模式，容易导致贴图边缘出现杂色，建议进行检查。
https://mp.weixin.qq.com/s/UkuxNLEP3_oHp95NbleONg

视域剔除在默认渲染管线中是一定会做的，但它剔除的基本并不是以Triangle为单位，而是以GameObject为单位的，只要这个GameObject（Mesh）的包围盒与视域体有交集，就会被认为是要渲染的，所以会将其Triangle全部放入Draw Call中，并传入GPU进行渲染。因此，你会看到Statistics中显示的三角面片是很高的。
在传入到GPU后，该Draw Call中所有的顶点都会进入Vertex Shader阶段，所以如果该Mesh是8000个Triangle，那么这8000个都要进行计算，从目前我们所优化过的游戏项目（特别是重度MMO）中可以发现，很多时候都是几万的网格顶点在这里进行计算，在中低端设备上都会造成不小的计算量。
而你问题中说的光栅化实际上是在Vertex Shader之后，也就是要到Fragment Shader阶段，这个时候是在经过一系列操作（比如深度检测等）后将Triangle向屏幕进行投射，然后通过光栅化进行颜色计算，再经过各种Buffer之后形成最终的FrameBuffer，也就是我们最终看到的内容。
渲染Pipeline大体上是上述过程，所以通过上面的说明，题主就可以明白，光栅化和视域剔除其实没有关系，前者是GPU部分，后者是CPU部分，功能是完全不一样的。光栅化主要根据每个Triangle在屏幕上的投影来计算颜色，跟Mesh中Triangle的前期剔除是没有关系的。Statistic中的统计没有问题，因为确实有一定数量的Triangle被传入到了GPU中。如果你的项目遇到了这种情况，那么我建议将其切成小块来进行渲染，因为从概率上来说，它可以降低渲染计算压力。希望上面的说明能对你的疑惑有所帮助。

Q：请问AssetBundle.LoadAssetAsync()这个真的是异步获取资源吗？我用的是个人版Unity，这个API会阻塞主线程，是不是需要专业版才行呢？

A：AssetBundle.LoadAssetAsync()在加载资源的时候，比如Prefab，它里面用到的各种Texture、Mesh以及Shader都会在子线程Worker线程中进行加载。但是加载完成后会有后处理，比如Shader.Parse是一定会在主线程处理的，Texture和Mesh需要上传到GPU。如果开了多线程渲染并使用AUP功能，非RW的Texture和Mesh的上传会在渲染线程处理；如果没开多线程渲染，那么这一部分还是会由主线程来完成。这些后处理的名字叫XXX.AwakeFromLoad，如Texture.AwakeFromLoad，当主线程触发这些回调的时候，主线程其它的Update操作就必须等这些后处理完成才能继续。

还有其它的像Prefab的序列化，各种Component的序列化等也都是在主线程完成的。所以一次AssetBundle.LoadAssetAsync操作，其实并不是完全的异步，主线程中依然是要做不少工作。具体细节可以观看UWA DAY 2019年的视频，里面的讲解非常清晰：https://edu.uwa4d.com/course-intro/1/91
https://mp.weixin.qq.com/s/LUlZ-VvjxOghMDD9X4cKZg

渲染视域剔除

armv6 < armv7 < armv7s < arm64 < x86(ios模拟没有arm指令 android上有) 向后兼容
ios arm64主流（放弃armv7 iphone5）
android armv7主流

adb shell dumpsys meminfo packageName

关节动画  mesh skinning  gpu skin  gpu instance

mul_compile shader_feature

模型坐标系-->世界坐标系--->相机坐标系--->投影坐标系--->标准设备化空间-->视口变换--->光栅化阶段。
3D渲染中的Z-fighting现象 https://zhuanlan.zhihu.com/p/78769570

常规的做法确实就如你说的，不用TimeScale=0，各个地方去实现暂停，然后统一管理。 https://mp.weixin.qq.com/s/J_gGi3eBqXOl3RXFPe83SA

OnDemandRendering 按需渲染

uv坐标又称为纹理映射坐标(texture-mapping coordinates)，对应于每个顶点，用于确立模型表面的各个顶点的颜色采样与纹理上具体位置的对应关系。通俗来讲就是将一张图贴在模型表面，使得我们可以从“纹理”这块调色板上找到正确的颜色，来绘制模型。
Unity一共支持4套uv，在c#API中分别叫uv、uv2、uv3和uv4。通常来说(使用c# API中的命名)，uv用于主纹理，uv2用于光照贴图(Lightmap)的采样，uv3用于实时动态光照，uv4可进行自定义 https://mp.weixin.qq.com/s/nEwWNhl3vWdPtSjXC2KySg


在安卓手机上安装一个apk，并且运行之后，假设这个apk的包名叫com.x.y，会在安卓手机上多3个目录：
目录1：sdcard/Android/data/com.x.y，这个目录下有一个cache目录。
目录2：data/app/com.x.y-1，这个目录下有目录lib和目录oat，还有一个base.apk。
目录3：data/data/com.x.y，这个目录下有有5个目录，files，shared_prefs，cache，code_cache，lib。 https://mp.weixin.qq.com/s/CYxLIBqvjumXUZ3QY0DXzg


Q：用UWA检测AssetBundle资源冗余时，发现有17个资源冗余，但是通过对比查询Bundle的Manifest文件，发现这些冗余的资源都会单独打包成一个AssetBundle，并且没有存在于自己预设资源中，但是UWA给的结论是这份冗余的资源存在于他所在的各个预设当中，请问是怎么解？
A：我也是当初遇到的问题，Manifest没有这个冗余，AssetBundle加载进来，内存里你也没有发现这个冗余，调用GetAllAssetNames也看不到这个冗余的名字，但是如果调用LoadAllAssets，就出现了这个冗余，非常神奇，藏的很隐秘。
原因：Rawimage挂的Texture，ParticleSystem引用UI资源。
冗余的危害我就不说了。
解决方案：如果说尽量保证Rawimage的图和Prefab等资源打到一个AssetBundle，这个有点难，也很累，排查起来比较困难。
我的解决方案：
1. 除了Background，禁止Rawimage挂Texture，但是说实话，我的Background都做了RGBA分离，所以Rawimage挂的是Material，而Rawiamge不挂Texture是因为我们项目都是异步加载了的，尽量保证Prefab先出来，后面不重要的异步出来。
2. 禁止粒子特效挂在到UI的Prefab上，并且写工具，禁止粒子特效的Prefab引用UI资源，由于粒子特效ParticleSystem描述文件缺失大，如果挂在UI上，还会造成Prefab可能上M数量级，影响加载速度，同时粒子特效和UIPrefab分离，也不会造成冗余。


勾选了 include in build，bundle 中就会有一份冗余：既包含合图，又包含散图。但这种情况下，程序不需要做特殊逻辑，界面就能表现正常。（具体 runtime 是否合图，未抓帧验证）
不勾选 include in build（正确做法）：bundle 就会只包含 atlas，以及散图信息（不是完整的散图）。游戏内使用 atlas request manager 来确保图片能正常显示，否则会错乱。 如果自己实现了资源加载的话，可能还要自己找时机做 atlas 资源卸载 https://answer.uwa4d.com/question/5f5f15739424416784ef22f8

A1：先简单解释一下，Unity的Color Space为Linear时，会在最后输出阶段，进行的伽马校正（Gamma Correction），将Linear空间的像素转换为sRGB空间。Gamma Correction会将颜色的亮度变大（补偿），Unity会将补偿后的像素值输出给显示设备（UWA的Effect Scanning工具会输出到RenderTexture上）。

优化背包刷新机制 https://mp.weixin.qq.com/s/WX_AMyq7QJ6CF8U72C_WlQ

大概知道Auto Graphics API是判断设备是否支持OpenGL3的，如果不支持尝试OpenGL2，但是线性空间下，只能选OpenGLES3，会多出来Require ES3.1和Require ES3.1+AEP。
如果项目中用到了依赖ES3.1的特性，而且不支持Fallback，那么可以增加这个选项。比如用到了Compute Shader，但这样会减少兼容的设备。

GC方面的优化很重要，原则就是任何大于20B的GC都值得被注意。GC的优化比较琐碎，也比较考验基本功。

除了最简单的避免使用foreach，避免频繁new内存，ToString。下面几个点可能是往往容易被忽略。



1. GameObject.SetActive会引起GC
优化方法：对于渲染相关的，可以考虑是否隐藏MeshRenderer来替代，还有就是把GameObject拉到很远的地方，UI也同样适用。
2. C#自带的排序有GC
优化方法：自己实现排序算法,数量不多的直接写个简单的冒泡就行。
3. 反射会引起GC
优化方法：大部分的反射都可以用dictionary做缓存。
4. List.Add会有GC
优化方法：List底层是数组，在数组容量不够的时候就会扩充，会产生GC。可以考虑在new的时候直接指定大小。
5. Box Unbox 会有gc
Boxing的GC很隐藏，打桩也很难发现，Boxing的触发条件：当需要将栈（Stack）上的值类型转换为堆（Heap）上的引用类型，这个过程被称为“装箱”，它具有以下特性：
1. 在堆（Heap）上分配空间
2. 通知垃圾回收器有关新对象的信息
3. 复制值类型对象中的数据并传递给新的引用类型对象 https://www.cnblogs.com/wetest/p/9550990.html#top

下面几个点一定要注意!
Overdraw! Overdraw! Overdraw!注意每一块半透明是否需要渲染，面积是否能够减少。
Shader的复杂度会影响fillrate。
游戏场景内最好不要出现alpha test，会影响Hidden Surface Removal（HSR）的处理。
不要轻易尝试后处理，耗CPU, 耗内存, 耗GPU,中低配一定要关掉。
粒子系统请慎重使用，耗CPU，多Overdraw，数量和粒子总数都要控制好。
Static Batch 会消耗内存。
Dynamic Batch耗CPU，但是当需要渲染很多个同样的MeshRenderer的时候，对于减少DC非常有效，建议开启。
单局外的性能也要注意！

对动态HUD缓存机制的影响 https://zhuanlan.zhihu.com/p/43111806
NGUI
适量元素：Color.a= 0，移出
大量元素：SetActive(false)
Time + 二级缓存
UGUI
Scale = 0, Alpha Group = 0
如血条，伤害数字，经常会出现消失的UI元素，如果出现就创建，消失就destory，开销会非常大。所以通常的做法通过缓存，如果通过SetActive有时候会有额外的开销，
UGUI通常的操作方式可以通过scale = 0 ，或则Alpha Group为0，可以快速隐藏，不要直接alpha = 0 ，在draw call 上是没变化的，实际上还是画了个透明度为0的面片。
NGUI中和UGUI相反，如果设置alpha = 0 ，是会把顶点移除掉，可以减少setActive的开销。

event trigger Unity3D---UGUI---Button相关、点击、按下、抬起、长按事件 https://www.jianshu.com/p/9f0f90acc84f

https://zhuanlan.zhihu.com/p/43111806
https://www.cnblogs.com/wetest/p/7018010.html

yield return 0 0被装箱
yield return null 正确使用

mono事先会分配一定的堆内存，gc会定时调用也可以手动调用，释放被在被使用的内存，当申请内存是，mono中分配的内存不足，会调用gc释放内存，如果内存还是不足则会扩充mono内存，频繁的申请内存会耗光mono内存，同时可能会产生内存碎片，导致无法申请打的内存，导致mono内存耗光，产生gc，扩充mono内存。


优化无止境，优化的最高境界是不渲染

关于字体剥离和精简工具 FontSubsetGUI 和 FontPruner 的比较。
　　在 Unity 中制作游戏时对动态字体的剥离和精简是现在常用的手段，现在有两篇博客是大家阅读和参照较多的，分别是 如何精简Unity中使用的字体文件 和 FontPruner 字体精简工具。他们各自提供了一个用于精简字体的工具， FontSubsetGUI 和 FontPruner。前者是网络上一个作者提供的免费软件，现在不是很好找，后者是西山居开源的内部工具，基于 google 的 sfntly 制作。

　　我分别使用两个工具裁剪同一个字体，使用同一套文本，发现结果还是有区别。字体：仿宋；大小10Mb；裁剪文本：“abcdefg0123我要喝咖啡”；裁剪后查看工具：FontCreator（试用了众多工具后发现是最好用和专业的工具）。 https://www.cnblogs.com/yaukey/p/compare_fontsubsetgui_fontpruner_for_unity.html

模型辅助工具
　　美术制作出的模型通常是高精度模型，虽然效果好，但往往在中低端机不需要这么高的精度，这时候就要借助一些工具进行优化。
　　下面主要介绍Unity的工具，其它引擎应该有类似的工具。
　　MeshBaker：模型合并插件，可以对多个模型合成一个模型，从而减少模型个数，降低Draw Calls。多用于静态物体合并，比如场景和地面静态物体。
　　SimpleLOD：模型减面库，可以离线或运行时给模型进行减面优化，也可以方便地做成批处理工具

https://www.cnblogs.com/timlly/p/10463467.html **************

协程。协程是运行于主线程的伪线程，但可以模拟异步操作，没有多线程的副作用。故而也可以用于限帧操作。
Unity的协程不是真正的线程。

CPU和GPU通过PCI-e总线相连，它们之间的传输能力是有上限的，这个上限就是带宽。如果绘制需要传输的数据大于带宽（即带宽负载过高），就会出现画面卡顿/跳帧/撕裂/延迟/黑屏等等各种异常。

光照模型
Flat Shading（平面着色） Gouraud Shading（高洛德着色） Lambert Shading（兰伯特着色） Half Lambert Shading（半兰伯特着色） Phong Shading（冯氏着色） Blinn-Phong Shading

uniform变量在vertex和fragment两者之间声明方式完全一样，则它可以在vertex和fragment共享使用。（相当于一个被vertex和fragment shader共享的全局变量）
attribute变量是只能在vertex shader中使用的变量。（它不能在fragment shader中声明attribute变量，也不能被fragment shader中使用）
varying变量是vertex和fragment shader之间做数据传递用的。一般vertex shader修改varying变量的值，然后fragment shader使用该varying变量的值。因此varying变量在vertex和fragment shader二者之间的声明必须是一致的。application不能使用此变量。
https://www.cnblogs.com/softimagewht/p/4750847.html

当Canvas重建时，会引起材质的重新创建、排序、Mesh重建，这都会带来CPU的开销。当Canvas内容非常复杂的时候，每次重建很可能会带来比较明显的卡顿。UGUI里面的Mask会使用StencilBuffer，蒙版内的元素是没法和外面的元素做合批，即便在图集与材质都是相同的。这时可以用RectMask2D来实现蒙版，可以稍微降低一些开销。Canvas上的GraphicRaycaster选项，在不需要有交互时可以不勾选。而Layout组件会涉及到节点的遍历操作，都有内存与CPU的开销，如果能不用就不用它，或者自行硬编码实现简单的自动布局。
https://mp.weixin.qq.com/s?__biz=MzU5MjQ1NTEwOA==&mid=2247493814&idx=1&sn=39bcb1b3e6ce275e6e85665e628d0c55&chksm=fe1ddc1dc96a550bc846d83dd51cfe8e3c9be3f16495155a60dbbe3c08f232210a981385cea1&mpshare=1&scene=23&srcid=0704yTg4ItGDKJsQXiAMlRVS#rd

gpu 粒子 粒子在gpu进行计算 computershader gup instancing

Unity引擎自带的Terrian系统，可以通过分区块或者转为Mesh解决此部分性能瓶颈。我们可以通过插件Terrain Slicing & Dynamic Loading Kit来分割地形，并调整地形的尺寸和精度等配置参数。
https://mp.weixin.qq.com/s?__biz=MzU5MjQ1NTEwOA==&mid=2247493814&idx=1&sn=39bcb1b3e6ce275e6e85665e628d0c55&chksm=fe1ddc1dc96a550bc846d83dd51cfe8e3c9be3f16495155a60dbbe3c08f232210a981385cea1&mpshare=1&scene=23&srcid=0704yTg4ItGDKJsQXiAMlRVS#rd

Gfx.WaitForPresent && Graphics.PresentAndSync
这两个参数在Profiler中经常出现CPU占用较高的情况，且仅在发布版本中可以看到。究其原因，其实是CPU和GPU之间的垂直同步（VSync）导致的，之所以会有两种参数，主要是与项目是否开启多线程渲染有关。当项目开启多线程渲染时，你看到的则是Gfx.WaitForPresent；当项目未开启多线程渲染时，看到的则是Graphics.PresentAndSync。
https://blog.uwa4d.com/archives/presentandsync.html

Unity的UI渲染顺序的确定有2个步骤，第一步计算每个UI元素的层级号；第二步合并相同层级号中可以Batch的元素作为一个批次，并对批次进行排序；
先从直观的角度来解释计算层级号的算法：如果有一个UI元素，它所占的屏幕范围内（通常是矩形），如果没有任何UI在它的底下，那么它的层级号就是0（最底下）；如果有一个UI在其底下且该UI可以和它Batch，那它的层级号与底下的UI层级一样；如果有一个UI在其底下但是无法与它Batch，那它的层级号为底下的UI的层级+1；如果有多个UI都在其下面，那么按前两种方式遍历计算所有的层级号，其中最大的那个作为自己的层级号。
https://www.jianshu.com/p/061e67308e5f

设计UI时要考虑重用性，如一些边框、按钮等，这些作为共享资源，放在1~3张大图集中，称为重用图集；
其它非重用UI按照功能模块进行划分，每个模块使用1~2张图集，为功能图集；
对于一些UI，如果同时用到功能图集与重用图集，但是其功能图集剩下的“空位”较多，则可以考虑将用到的重用图集中的元素单独拎出来，合入功能图集中，从而做到让UI只依赖于功能图集。也就是通过一定的冗余，来达到性能的提升。
有相同材质和纹理的UI元素是可以Batch的，可以Batch的UI上下叠在一块不会影响性能，但是如果不能Batch的UI元素叠在一块，就会增加Drawcall开销。
要注意UI元素间的层叠关系，建议用“T”工具查看其矩形大小，因为有些图片透明，但是却叠在其它UI上面了，然后又无法Batch的话，就会无故多许多Drawcall；
UI中出现最多的就是Image与Text组件，当Text叠在Image上面（如Button)，然后Text上又叠了一个图片时，就会至少多2个Drawcall，可以考虑将字体直接印在下面的图片上；
有些情况可以考虑人为增加层级从而减少Drawcall，比如一个Text的层级为0，另一个可Batch的Text叠在一个图片A上，层级为1，那此时2个Text因为层级不同会安排2个Drawcall，但如果在第一个Text下放一个透明的图片（与图片A可Batch），那两个Text的层级就一致了，Drawcall就可以减少一个。
应该尽量避免使用Mask，其实Mask的功能有些时候可以变通实现，比如设计一个边框，让这个边框叠在最上面，底下的UI移动时，就会被这个边框遮住；
如果要使用Mask时，需要评估下Mask会带来的性能损耗，并尽量将其降到最低。比如Mask内的UI是动态生成的话（像List组件），那么需要注意生成的UI之间是否有重叠的现象；
有空好好看下Unity GUI层级合并规则与批次生成规则这一节。

批处理动态物体需要在每个顶点上进行一定的开销，所以动态批处理仅支持小于900顶点的网格物体。

GC释放的内存只会留给mono使用，并不会交还给操作系统，因此mono堆内存是只增不减的。 https://blog.csdn.net/qq_33337811/article/details/78093479

Dynamic Batching
Unity可以自动batch移动物体到相同的draw call，如果它们具有相同的材质和满足其它标准。动态Batching是自动完成的，不需要你做额外的事情。
Batching 动态的物体每个顶点会有某些开销，所以batching只适用于定点数小于900的meshes。
如果你得shader使用了顶点位置，法线和单独的UV，那么你可以batch 300 个顶点;如果你得shader使用了顶点位置，法线，UV0，UV1，和正切，只能batch 180个顶点。
这个限制的数量将来有可能会变化。
如果物体包含镜像变换，他们将不会被batched，例如，object A 的scale 为 +1 object B 的scale 为-1，就不能batched到一起。
使用不同材质的实例，即使他们实质上是相同的，也会导致两个物体不能被batched到一起。阴影投射除外。
具有光照贴图的对象有额外的渲染参数：光照索引和 偏移/放缩 的光照。所以一般动态lightmapped对象应指向完全相同的光照贴图位置然后再进行batch。
多通道的shader将不会被batching
几乎所有的Unity shader都支持前置渲染几个灯光，有效的为他们做更多的通道。“额外的逐像素的灯光”的draw call 将不会被batched。
传统的延迟渲（逐通道光照）染通道禁用了动态batching，因为它必须绘制两次。
由于它的工作原理是变换所有的物体的顶点到CPU的世界坐标中，所以它仅仅在它的工作（变换到cpu的世界坐标）比做一次“draw call”小的时候才能起到好的作用。究竟一个DrawCall有多昂贵取决于诸多因素，主要是所用的绘图API。例如，在控制台或当前流
行的APIs 例如Apple Metal DrawCall的开销一般比较低，所以一般动态batching不会达到好的效果。

还不能忘了IL2CPP，这是完全独立的一个Runtime，编译成IL2CPP就意味着跟Mono没有关系了，这时它也有自己的一套GC实现，很不幸依然使用了老旧的Boehm-Demers-Wiser GC。


A2：1）Mono早期使用的是Boehm-Demers-Wiser GC库，后期更新为有分代和多线程能力的SGen库。
2）这里需要强调一下，由于历史原因，Unity使用版本比较老的Mono，然后在其基础上做了很多修改，以及整合外围的一些新功能，导致的结果是无法跟进最新版本的Mono，这也是为什么GC还是最老的Boehm-Demers-Wiser库。所以如果想自己尝试整合最新的Mono，很可能会不理想。
3）然后，还不能忘了IL2CPP，这是完全独立的一个Runtime，编译成IL2CPP就意味着跟Mono没有关系了，这时它也有自己的一套GC实现，很不幸依然使用了老旧的Boehm-Demers-Wiser GC。
4）Mono在语法、编译、Runtime、库等等层面上确实执行了.NET的标准，但是GC的底层实现上至少早期是没有明确规定怎么实现底层的，就算有，Mono也因为微软不公开代码的原因，当时也不得不自己摸索一套方案，于是也就有了现在跟.NET毫无关联的GC实现。


纹理导入设置中的 Read/Write Enabled 处于勾选状态
开启纹理导入设置中 Read/Write Enabled，纹理在传到GPU之后，CPU端的数据也会一直保留在内存中。因为在移动端显存共享内存，会导致内存占用加倍。因此需要注意是否有需要在CPU端访问的纹理，比如：需要通过脚本获取纹理像素的情况下，就要开启纹理导入设置中的 Read/Write Enabled。

模型文件导入设置中 Read/Write Enabled 处于勾选状态
除了需要脚本中访问的网格，作为网格碰撞器中的网格，脚本中用StaticBatchingUtility.Combine静态合批的网格，以及粒子系统发射的网格之外，其它模型建议不要勾选此项 ，否则会在内存也保留一份网格实例占用内存。

频繁调用的Camera.main
建议脚本做好Main Camera的Cache。Camera.main实际为GameObject.FindGameObjectsWithTag(“MainCamera”)调用，主要因为引擎无法得知用户通过脚本设置的MainCamera，CPU消耗较高。

脚本中大量UnityEngine.Object的判等操作
建议改为用InstanceID来判断即Object. GetInstanceID，运行期间保证唯一。 因为Object的判等还有额外的耗时操作，而Int类型的判等就非常快速了。同理，使用Object作为key的数据结构也建议改用InstanceID做key。

地图切割
unity 地形切割及动态加载插件Terrain Slicing Dynamic Loading Kit v4.0
Unity 场景分页插件 World Streamer 支持无限大地图的解决方案（二）

Q：请问Unity3D引擎运行时，如果我们使用的是采用了某个压缩格式的纹理，则纹理是在载入时解压并按照位图的RGBA32位的格式保存在内存，还是在内存中也是压缩格式的数据，并在提交渲染时由GPU自行解压并采样纹素。为何经常看到文章说GPU硬件支持某些图片或者视频流的压缩格式呢？这个处理流程大概是什么样的？

A：其实这是两个概念，图片压缩和纹理压缩（术语可能使用的不准确，请大神指正）。jpg和png这种是图片压缩，ETC、PVRTC、ASTC这种是纹理压缩。图片文件从硬盘读取到内存，解压缩成为纹理，再传给GPU，GPU再进行解压缩变成具体的RGB色彩值。如果没有开Read&Write，纹理会从内存中卸载掉。

尽可能避免布局组
问题：每个尝试脏化其布局的UI元素将执行至少一次GetComponents调用。
当布局系统上的一个或多个子元素发生更改时，它会脏化。发生更改的子元素会导致拥有它的布局系统无效。
关于布局系统的一点补充：布局系统是直接位于Layout Element上的一组连续的布局组。Layout Element不仅仅是Layout Element组件：UI图像、文本和滚动矩形（它们也是Layout Element）。滚动矩形也是布局组。
回到问题：每个将其布局标记为脏化的UI元素至少会执行一次GetComponents调用。该调用会在Layout Element的父级中查找有效的布局组。如果找到，它会继续向上查找Transform层级，直到停止查找布局组或达到根层级（以先到为准）。因此，每个布局组会将一个GetComponents调用添加到每个子Layout Element的脏化过程，这导致嵌套不具足的性能极其低下。
解决方案：尽可能避免布局组。
为比例布局使用锚点。在包含动态数量元素的活跃UI上，请考虑自己编写计算布局的代码，并且确保仅在必要时使用，而不是每次发生一个更改时都使用。

遮挡剔除是当一个物体被其他物体遮挡住而不在摄像机的可视范围内时，不对其进行渲染。在3D图形计算中并不是一个自动进行的过程，因为在绝大多数情况下离相机最远的物体首先被渲染，靠近摄像机的物体后渲染，并覆盖先前渲染的物体（这种重复渲染又叫做"OverDraw"）， 它不同于视锥剪裁。

视锥剪裁只是不渲染摄像机视角范围外的物体，而对于那些被其他物体遮挡，但是依然在镜头范围内的物体，则不会被视锥剔除。当你使用遮挡剔除时，视锥裁剪还是会生效的。我们在游戏中主流的Occlusion Culling 方案基本上是以下几种方式:

Stream的子类
1.MemoryStream 存储在内存中的字节流。
2.FileStream 存储在文件系统的字节流。
3.NetworkStream 通过网络设备读写的字节流。
4.BufferedStream 为其他流提供缓冲的流。


关于AssetBundle.LoadFromMemroy内存翻倍问题
LoadFromMemroy输入的byte数组是用的MONO堆内存吧，哪怕这个内存有释放，但Mono堆内存总量只升不降的，加载资源过程中，一旦Mono触发GC后仍内存不够，很可能需要申请新的Mono内存，会导致Mono内存持续升高~

而且用LoadFromMemroy没有必要性吧，用这个接口哪怕内存不是问题，也会在加载资源时明显比LoadFromFile慢不少，而且真想逆向AB资源还是很容易的。退一步说，非要加密的话，也建议使用LoadFromStream然后自己去实现Stream解密

常用技术按年份来排：Unlit→Lambert→Blinn-Phong→各种PBR。

UI重绘时机【SendWillRenderCanvases】
当UI ModeifyMesh之后，就会触发Canvas的SendWillRendererCanvases，进行UI重绘。[RectTransform修改了SizeDetal、Anchor、pivot都会触发ModifyMesh，其他的SQT变化并不会触发ModifyMesh]
切换UI的Active之后，会触发ModifyMesh，会触发SendWillRendererCanvases消耗
切换UI的CanvasGroup或CanvasRenderer的alpha，不会触发ModifyMesh，也就是说设置alpha为0也能够达到SetActive=false的效果，并且alpha设置为0之后，也不会进行DrawCall计算
切换UI的Parent之后，也会触发ModifyMesh，会触发SendWillRendererCanvases消耗
https://github.com/XINCGer/Unity3DTraining/blob/master/PerformanceOptimization/TX%E5%B7%A5%E4%BD%9C%E5%AE%A4UI%E4%BC%98%E5%8C%96%E6%96%87%E6%A1%A3.md

首先这是最简单的情况，过程简述如下

首先判断当前UI所占的Rect区域【相对于整个的Root节点而言】是否底下有重叠的情况，如果没有，那么当前就是第0层，将当前层级记录下来
深度优先迭代Transform下的所有孩子，从最顶层的层级开始判断，查看当前UI Rect所占的区域是否与该层级的任意UI节点重叠，如果是，那么判断当前的UI节点是否能够被该层级的UI节点进行Batch，如果能，那么当前UI节点属于该层级，否则属于后面一个层级。如果没有重叠，那么依次往前面的层级检测，最低层级为0
得到所有UI节点以及对应的层级后，将每个层级中的UI节点进行batch合并分析，能够进行合并的放在一个batch结构中。
对所有的batch结构进行排序，首先能够确认的一个排序规则是，Text的batch先被绘制，然后才是进行Image的绘制。如果有Mask的情况，Mask的Text与Mask的Image会比无Mask的后被绘制。同时需要注意的是，即便是Text，但是由于font不同或者Text的材质不同，也是不能进行Batch的，那么此时应该如果判断batch排序呢，这里笔者猜测是根据Hierarchy中的先后顺序得出的，Image的也不例外
最后将所有的层级从下到上取出所有的Batch集合放在一个统一的集合中，然后迭代该Batch集合，如果相邻的两个Batch之间能够进行再合并，那么就合并为一个Batch。
最后，得出的Batch集合就是UI的DC数目，也是最后UI的渲染顺序。

尽量避免Unity提供的Outline与Shadow
Outline与Shadow会产生多4倍的定点数，这是不能够忍受的
使用自己提供的SingleOutline,只多一倍的定点数，并且更符合美术的预期

WAV 适用于较短的音乐文件可用作游戏打斗音效
MP3 适用于较长的音乐文件可用作游戏背景音乐

动画文件优化思路
1.使用Optimal压缩格式
2.去除动画文件的scale信息
对于一般的人形动画需求，不会有模型骨骼scale变化的情况。
因此我们可以把动画信息的scale部分去除，可以节约一部分大小。
3.缩减transform的float精度信息
默认存储每一帧transform信息的是10位精度的float格式数据。
建议通过导入器的OnPostprocessModel函数，缩减此数据为3位精度float，视觉效果基本一样。优化效果非常显著。


Unity提供了三种批次合并的方法，分别是Static Batching，GPU Instancing和Dynamic Batching。它们的原理分别如下：
Static Batching，将静态物体集合成一个大号vbo提交，但是只对要渲染的物体提交其IBO。这么做不是没有代价。比如说，四个物体要静态批次合并前三个物体每个顶点只需要位置，第一套uv坐标信息，法线信息，而第四个物体除了以上信息，还多出来切线信息，则这个VBO会在每个顶点都包括所有的四套信息，毫无疑问组合这个VBO是要对CPU和显存有额外开销的。要求每一次Static Batching使用同样的material，但是对mesh不要求相同。

Dynamic Batching将物体动态组装成一个个稍大的vbo+ibo提交。这个过程不要求使用同样的mesh，但是也一样要求同样的材质。但是，由于每一帧CPU都要将每个物体的顶点从模型坐标空间变换到组装后的模型的坐标空间，这样做会带来一定的计算压力。所以对于Unity引擎，一个批次的动态物体顶点数是有限制的。

GPU Instancing是只提交一个物体的mesh，但是将多个使用同种mesh和material的物体的差异化信息（包括位置，缩放，旋转，shader上面的参数等。shader参数不包括纹理）组合成一个PIA提交。在GPU侧，通过读取每个物体的PIA数据，对同一个mesh进行各种变换后绘制。这种方式相比static和dynamic节约显存，又相比dynamic节约CPU开销。但是相比这两种批次合并方案，会略微给GPU带来一定的计算压力。但这种压力通常可以忽略不计。限制是必须相同材质相同物体，但是不同物体的材质上的参数可以不同。
https://zhuanlan.zhihu.com/p/76562300

Draw call严格意义上，CPU每次调用图形API的渲染函数（使用OpenGL举例，是glDrawElements或者DrawIndexedPrimitive）都算作一次Draw Call，但是对于Unity而言，它可以多个Draw Call合并成一个Batch去渲染。

Resource 文件夹（Do not use it. 除非在 debug 的时候）
- Resource 和 AssetBundle 一样，也有头来索引。Resource  在打进包的时候会做一个红黑树，来帮助 Resource 来检索资源在什么位置，
- 如果 Resource 非常大，那么红黑树也会非常大。
- 红黑树是不可卸载的。在刚开始游戏的时候就会加载进内存中，会持续对游戏造成内存压力。
- 会极大拖慢游戏的启动时间。因为红黑树没加载完，游戏不能启动。 https://www.notion.so/Unity-f79bb1d4ccfc483fbd8f8eb859ae55fe

VM 内存池
- mono 虚拟机的内存池
- VM 会返还内存给 OS 吗？
    - **会**
- 返还条件是什么？
    - GC 不会把内存返还给系统
    - 内存也是以 Block 来管理的。当一个 Block 连续六次 GC 没有被访问到，这块内存才会被返还到系统。（mono runtime 基本看不到，IL2cpp runtime 可能会看到多一点）
- 不会频繁地分配内存，而是一次分配一大块。

- Closures and anonymous methods（闭包和匿名函数）
    - 如果看 IL，所有匿名函数和闭包会 new 成一个 class，因此所有变量和要 new 的东西都是要占内存的。这样会导致协程。
        - 有些开发者会在游戏开始启用一个协程，直到游戏结束才释放，这是错误的。
        - 只要协程不被释放掉，所有内存都会在内存里。
https://www.notion.so/Unity-f79bb1d4ccfc483fbd8f8eb859ae55fe

odin序列化插件
shadercontrol shader变体控制


　(1)正常情况下游戏如果一直玩下去，Mono是不是会一直增加？ 比如频繁打开一个界面，界面里有脚本会不断创建一些东西 ，那么Mono是否会不断增加？对性能上会不会造成影响呢？

　　在除开启IL2CPP功能的应用中，Mono 确实是不会下降，但并不应该一直上升。 创建出来的东西，如果被引用在一个容器里，或者被某些脚本的变量引用，那么这部分堆内存就释放不掉；但如果没有被任何容器或者变量引用（比如，临时拼一个 String），那么这部分堆内存会在 GC 的时候释放（释放是指变为空闲的堆内存，堆内存的总量是不会下降的）。 对于后者，频繁地 new 对象虽然不会一直增加堆内存，但是会加速 GC 调用的频率，所以同样是需要尽量避免的。

　　(2)如果脚本引用了GameObject，那转换场景的时候脚本和GameObject都没了，还会产生堆内存的吗？

　　如果脚本是MonoBehaviour，而且在切换场景后所挂的Game Object被释放了，那么这个脚本对象所引用的堆内存就会在GC的时候被释放。 但有一种例外，如果是通过Static变量引用的堆内存，那么依然是释放不掉的，除非手动解开引用，比如变量置Null，数组Clear等等。

　　(3)另外Unity还有一个老生常谈的IsNull问题

　　在名为A的MonoBehaviour中，有个数组来存放名为B的 MonoBehaviour对象的引用。当我们其他的逻辑去Destroy了B对象所在的GameObject后，在A对象中的数组里，遍历打印，它们（B的引用）都为Null，在Inspector面板上看是missing。而这时候进行GC，堆内存其实并未释放这些B对象。只有当A对象中的数组被清空后，再调用GC，才可释放这些对象所占内存。这种现象是否正常？为什么值为Null但却还是被引用着，无法通过GC释放呢？

　　首先这种现象是正常的。这是Unity中对Null的检测做了特殊的处理所致，在Unity中MonoBehaviour对象除了存在于Managed Heap中（作为“壳”），在Native内存中还会有一个相对应的“实体”，在调用Destroy时，真正被释放的正是这个“实体”。而在判断一个MonoBehaviour对象是否为Null时，Unity会首先检测“实体”是否已经被销毁，如果是则返回为true，但此时Managed Heap中的“壳”实际上依然是被引用的，从而就会出现对象的Null判断为true，但实际上还是被引用着，无法被GC释放的问题。 相关的细节可见官方blog对Unity中Null判断的解释：http://blogs.unity3d.com/2014/05/16/custom-operator-should-we-keep-it/

　　如果是Unity.GameObject类型的，查看其是否等于null，如果作为Unity.GameObject对象是null，而作为System.Object对象不是null，说明这个对象已经被Unity标记为销毁了，Unity.GameObject重载的==运算符让游戏逻辑认为它是空的。


虽然透明度在所有平台上都会耗费大量的算力进行渲染，但移动设备因为存在“过度绘制”，所以情况会更严重。当 GPU 不得不反复渲染一个像素时，就会发生过度绘制。每一个与透明对象所重叠的像素都不得不进行渲染，这会严重拖慢游戏的性能。但是，如果你确实需要在游戏中用到透明度，就必须了解能用得上的各种选择。
对于移动设备，不妨使用 Alpha 混合，因为移动设备的 GPU 具备优化功能，有助于渲染 Alpha 混合的对象。Alpha 混合可以为你提供一系列透明度选项，而不仅仅是像硬生生的画面裁剪那样要么显现要么不显现。
这个透明选项可以让对象看起来完全不透明或是透明，但无法实现中间效果。这常被称为“裁剪”。我们强烈建议在移动设备中要避免使用裁剪，因为这会使 GPU 的若干优化功能无法启用。
https://mp.weixin.qq.com/s/KSkBCtKvxpt5GCnoYH8Ucg


防止代码别剔除
不要忽视Managed code stripping的副作用
在构建的场景中引用所需的脚本，以防止在构建项目时剔除需要的代码。
在脚本中引用所需的类，以防止在构建项目时剔除需要的代码。
添加一个link.xml文件，以防止UnityLinker剔除所需的代码。


shaderlab 60m


Unity中Lua造成的堆内存泄露问题
情况一：Lua对象是全局变量，直接放在_G中。禁止定义全局变量，给现有的全局变量前加载local声明。可以使用一些Lua静态语法检查的手段，如Luacheck（https://github.com/mpeterv/luacheck）来检查。

情况二：Lua对象被一些全局的Table引用。

我们每个UI面板都对应MVC结构，用了面向对象的概念。其中view在面板关闭时会直接置空，但Ctrl和Model都不会，它们都放在一个全局的管理类（Table）。当Model中持有了面板上的对象时，会出现对象销毁了，但Model中的变量不为空的情况。

情况三：Lua对象的function字段被赋值给了C#的事件/委托。
比如UI控件的按钮点击事件。在LuaGC时，发现C#对象对其有引用，GC不掉。导致Lua中的对象通过Tolua引用住了C#对象，而C#对象又通过ToLua引用Lua对象。
https://mp.weixin.qq.com/s/weuQjDcGPUyxZzQZEsNDxg

Unity内部使用一个名为FMOD的系统来播放音频剪辑（AudioClips），FMOD运行在自有线程上，那些线程负责解码和混合音频。
但音频播放不是完全不消耗性能的，一些工作会在主线程上为场景中每个活动音频源（Audio Source）而执行。而在如较老的移动手机这样内核数量较少的平台上，FMOD的音频线程可能会和Unity的主线程及渲染线程竞争处理器内核。

实际上，在执行包括距离检查在内的所有和音量相关的计算后，Mute设置仅会把Volume参数限制为0。Unity也会把静音的音频源提交给FMOD，而FMOD会无视这些音频源。音频源参数的计算和音频源提交给FMOD的过程都会在Unity性能分析器中作为AudiosSystem.Update显示。

如果你注意到有大量时间分配给该Profiler标记，请检查是否有大量静音的活动音频源。如果是，请考虑禁用静音的Audio Source组件，而不是把它们设为静音，或者禁用它们的游戏对象。你也可以调用AudioSource.Stop，它会停止音频播放。

out 关键字会导致参数通过引用来传递。这与 ref 关键字类似，不同之处在于 ref 要求变量必须在传递之前进行初始化。若要使用 out 参数，方法定义和调用方法都必须显式使用 out 关键字。例如：

单元测试 Editor Tests Runner https://www.cnblogs.com/msxh/p/7354229.html
抛出异常，检测异常是否是预测的结果
单元测试定义：单元测试在传统软件开发中是非常重要的工具，它是指对软件中的最小可测试单元进行检查和验证，一般情况下就是对代码中的一个函数去进行验证，检查它的正确性。一个单元测试是一段自动化的代码，这段代码调用被测试的工作单元，之后对这个单元的单个最终结果的某些假设进行检验。单元测试使用单元测试框架编写，并要求单元测试可靠、可读并且可维护。只要产品代码不发生变化，单元测试的结果是稳定的。

new struct 不会使用托管堆分配内存，会初始化struct，栈上分配内存,结构类型使用new不会分配托管堆分配内存而是调用构造函数初始化字段
声明结构的默认（无参数）构造函数是错误的。总是提供默认构造函数以将结构成员初始化为它们的默认值。在结构中初始化实例字段也是错误的。 如果使用 new 运算符创建结构对象，则会创建该结构对象，并调用适当的构造函数。与类不同，结构的实例化可以不使用 new 运算符。如果不使用 new，则在初始化所有字段之前，字段都保持未赋值状态且对象不可用。 结构类型使用new不会分配托管堆分配内存而是调用构造函数初始化字段。结构的构造函数要么是有参数的，不可能是无参数，应为无参数是系统自己隐式添加的，就算有另外的构造函数，如果你显示的声明一个无参数的构造函数在结构里，将导致编译错误。 结构体如果不用new初始化，也可以，但是在其使用前必须手动初始化他的每一个成员，否则编译器将报错。用new初始化，可自动将其中的每一个成员都置为零值

**深拷贝：**指的是拷贝一个对象时，不仅仅把对象的引用进行复制，还把该对象引用的值也一起拷贝。这样进行深拷贝后的拷贝对象就和源对象互相独立，其中任何一个对象的改动都不会对另外一个对象造成影响。举个例子，一个人叫张三，然后使用克隆技术以张三来克隆另外一个人叫李四，这样张三和李四就是相互独立的，不管张三缺胳膊还是李四少腿了都不会影响另外一个人。在.NET领域，值对象就是典型的例子，如int, Double以及结构体和枚举等。具体例子如下所示：
浅拷贝：指的是拷贝一个对象时，仅仅拷贝对象的引用进行拷贝，但是拷贝对象和源对象还是引用同一份实体。此时，其中一个对象的改变都会影响到另一个对象。例如，一个人一开始叫张三，后来改名字为张老三了，可是他们还是同一个人，不管张三缺胳膊还是张老三少腿，都反应在同一个人身上。在.NET中引用类型就是一个例子。
如何实现一个深拷贝呢？当时只回答回答了一种方式，就是使用反射，然后面试官提示还可以通过反序列化和表达树的方式。然后又继续问，如果用反射来实现深拷贝的话，如何解决互相引用对象的问题呢？（递归拷贝对象数据，判断条件是否已经拷贝，中断递归） 当时我给出的答案是说那就不用反射去实现呗，用反序列化实现呗，或者直接避免使两个对象互相引用呗。然后面试官说，如果一定用反射来写，你是怎么去解决这个问题呢？这时候我就愣住了。

反序列化深拷贝

　使用反射（Reflection）使得程序在运行过程中可以动态的获取对象或类型的类型信息，然后调用该类型的方法和构造函数，或访问和修改该类型的字段和属性；可以通过晚期绑定技术动态的创建类型的实例；可以获取程序集中的所有类型信息；可以在动态构建新类型；还可以检索元素所添加的特性；
https://www.cnblogs.com/minotauros/p/9709491.html

委托 反射 lambert linq async await

1.release是上线时用的，可以理解为没有那些类似“NSLog那些调试时写的打印信息”。
2.develop是开发时用的，debug的版本带调试信息。
3.adHoc打测试版本用的，允许用户从第三方下载该应用。

ios xcode 证书发布
App Store Connect -上架App Store以及TestFlight的app，用于生产环境发布
Ad Hoc - 部分机器可安装的app，用于非生产环境的测试 用于第三方安装测试 需要adhoc正式发布
Enterprise - 企业级应用发布
Development - 与Ad Hoc类似，只有后续步骤所需要的证书和描述文件不同
https://insights.thoughtworks.cn/ios-package-release/

但大家可能会发现，企业级应用也没有任何安装数量上的限制，甚至不需要审核。那是否可以把企业级应用public的发布呢？
答案是否定的。
首先，企业级应用需要Apple企业账号，Apple对于企业级账号的发放是非常严格的。
其次，Apple规定企业级应用的下载途径不可公开，若发现公开则会有封号，应用失效的后果。
因此，虽然从能力上看企业级应用能被安装在任意一台机器上，但是从途径上Apple限制了可能性。
https://insights.thoughtworks.cn/ios-package-release/

ios包中包含有证书私钥和描述文件生成的签名文件，安装后，系统通过签名文件生成公钥，对比是有ios提供的正确公钥.

Unity中影响渲染顺序的因素总结 https://zhuanlan.zhihu.com/p/55762351

c# 字符串连接使用 +  string.format stringbuilder 效率比较 https://www.cnblogs.com/dawenyang/p/6245471.html
+操作符：最终调用string.concat，运行时分配内存,只分配一次内存(一次性分配内存)
string.format最终调用stringbuilder
stringbuilder初始化是分配内存，多次扩充内存将降低效率,可以多次分配内存.(在原有基础扩充内存，不需要重新全部分配)

浅谈 .NET 中的对象引用、非托管指针(& *)和托管指针(out ref) https://www.cnblogs.com/blurhkh/p/10357576.html

手势触摸识别插件  easytouch fingergester


对象引用#
对于对象引用，大家都不会陌生。
与值类型变量直接包含值不同，引用类型变量存储的是数据的存储位置（托管堆内存地址）。
对象引用是在托管堆上分配的对象的开始位置指针。访问数据时，运行时要先从变量中读取内存位置（隐式间接寻址），再跳转到包含数据的内存位置，这一切都是隐藏在CLR(公共语言运行库common language runtime)背后发生的事情，我们在使用引用类型的时候，并不需要关心其背后的实现。

模型顶点色（color）怎么去除 https://answer.uwa4d.com/question/5a8f77970b827e2c0bfdcfaf

lua内存泄漏
.在C#层，做一个tick逻辑，每帧检查ObjectTranslator中的objects中的一部分对象，如果是Unity.GameObject类型的，查看其是否等于null，如果作为Unity.GameObject对象是null，而作为System.Object对象不是null，说明这个对象已经被Unity标记为销毁了，Unity.GameObject重载的==运算符让游戏逻辑认为它是空的，这时候C#对象可以提前销毁掉，因为即便Lua层想访问它，也已经会报错了。
http://www.manew.com/thread-141722-1-1.html

MemoryProfiler 内存分析工具

神奇的深度图：复杂的效果，不复杂的原理 https://www.cnblogs.com/murongxiaopifu/p/7050233.html
有点科幻的扫描网
透过墙壁绘制背后的“人影”
护盾/能量场效果
边缘检测

Unity3D 实用技巧 - Unity Shader 汇总式学习·初探篇 https://mp.weixin.qq.com/s?__biz=MzU5MjQ1NTEwOA==&mid=2247521014&idx=1&sn=fc2f91d8eaedcd98f6f43748e39865bc&chksm=fe1da65dc96a2f4b16c302c21b0705b918e185aaaadfcde369b49610ad9247db64adf0ad9466&xtrack=1&scene=90&subscene=93&sessionid=1606629604&clicktime=1606629851&enterid=1606629851&ascene=56&devicetype=android-29&version=270014e5&nettype=WIFI&abtest_cookie=AAACAA%3D%3D&lang=zh_CN&exportkey=AfLu2E0d%2F%2BQI0mZIOIXesnA%3D&pass_ticket=oeKONKdvpp7Y6OjvpbH6OrttdMTr73bmL9P7bHkoEvGYdY%2Fq99PfQSEBma4T%2ByfU&wx_header=1
透明度混合：可以得到真正的半透明效果，它会使当前片元的透明度作为混合因子，与已经储存在颜色缓冲中的颜色值进行混合么，得到新的颜色。但是，透明度混合需要关闭深度写入，这使得我们要非常小心物体的渲染顺序。注意：透明度混合只关闭了深度写入，但没有关闭深度测试。这表示当使用透明度混合渲染一个片元时，还是会比较它的深度值与当前深度缓冲中的深度值，如果深度值距离摄像机更远，那么就不会在进行混合操作。比如一个不透明物体在透明物体前面，我们先渲染不透明物体，可以正常的挡住不透明物体。

常见混合操作类型应用：
A   //正常（Normal）透明度混合 Blend SrcAlpha OneMinusSrcAlpha
B   //柔和相加 Blend OneMinusDstColor One
C   //正片叠底 Blend DstColor Zero
D   //两倍相乘 Blend DstColor SrcColor
E   //变暗 BlendOp min Blend One One
F   //变亮 Blend OneMinusDstColor One Blend One OneMinusSrcColor
G   //线性减淡 Blend One One

https://www.cnblogs.com/LiTZen/p/11597913.html
对比：SpriteRenderer vs CanvasRenderer
在Hierarchy窗口,你可以把sprites随便放在哪。然而，UI Images不得不放在canvas下面。你可以通过transform移动其他obejcts那样移动sprites,但是images使用RectTransform来在界面系统中移动。
使用默认材质时，Sprites是在”Queue” = “Transparent” “RenderType” = “Geometry”(原文： transparent geometry queue)模式下渲染的。UI Images也是在这种模式下渲染的，除非你使用了Overlay 模式渲染（coffeecato补充：Canvas的Render Mode）,这种情况下它将会通过Canvas.RenderOverlay渲染。你可能会猜到，这样在移动设备上的开销很大。我们稍后会讨论到。
sprites和images的一个最重要的区别在于sprites支持网格的自动构造，而UI Image的网格始终由矩形构成。构造网格的原因将会在下一节讲到；我们将会看到它的重要性及它对性能的重大影响。

SpriteRenderer 与 MeshRenderer
SpriteRenderer MeshRenderer都继承自render，SpriteRenderer不支持光照、阴影，所以SpriteRenderer的渲染效率会更高。
SpriteRenderer可以使用sprite editor播放sprite动画
mesh需使用顶点动画播放
SpriteRenderer不支持动态 静态合批 gpuinstancing

Unity3D性能优化：ShaderLab内存占用 https://zhuanlan.zhihu.com/p/27336202
模型导入的时候，“Import Materials”是默认勾选的。所以当模型导入时，Unity会在同目录创建“Materials”目录，并创建相应的材质，而这个材质默认是使用Standard。
由于美术在制作过程中对Prefab中对模型另外赋予材质，所以实际上，默认创建的材质（Standard）是没有使用到的。可是当加载模型的时候，却又把默认创建的材质加载上了，并对着色器解析了。因此导致内存中有Standard。
那么解决方法也很简单，把“Import Materials”去掉，并把没有使用的默认材质删除

https://stackoverflow.com/questions/3726143/svn-script-to-commit-a-set-of-deleted-files svn script to commit a set of deleted files
svn st | grep ! | sed 's/!\s*//' | xargs -I{} svn remove '{}'
for i in $(svn st | grep \! | awk '{print $2}'); do svn delete $i'@'; done
svn st | grep ! | sed 's/^.*C\ //g' | xargs -I{} svn remove '{}'
find . | grep .meta | xargs -I{} rm '{}'

反编译dll dnspy

mipmap采样 https://www.zhihu.com/question/329521044/answer/1286662690
想象一下，你有一个Quad，摄像机的位置又刚好在一个不错的位置，Texture的texel刚好和屏幕上的pixel一一对应，这是一种完美的情况。那么假如这个Quad离摄像机非常远呢，这种情况下你在屏幕上占用的pixel就非常小了，可你的texture还是那么大，结果就是你屏幕上的那块区域因为采样不足，有明显的走样。那么解决方案就很明显了，既然一个pixel覆盖了多个texel，我增加采样不就ok了，没错，我们为远处的一个像素进行多次采样，计算出来它最终的颜色。

grep -C 5 foo file 显示file文件里匹配foo字串那行以及上下5行
grep -B 5 foo file 显示foo及前5行
grep -A 5 foo file 显示foo及后5行

// 放弃当前修改
svn revert -R .
// 更新
svn up
// 查看最近5条svn log日志
svn log -l 5
// 从r608回滚到r602
svn merge -r 608:602 ""

https://mp.weixin.qq.com/s/oSd4sfEo8JBadTi-YHR3vQ
对GPU来说，处理类似于“if-else”结构的分支语句不是它的强项，GPU的特点和功能决定了它更适合去并列地“执行”重复性的任务，而不是去“选择”。所以Shader变体的存在就很好地解决了这个问题，GPU只需要根据关键字去执行对应的Variant内容就可以，避免了性能下降的可能。同时，项目在运行时，可以通过在代码中选择不同的Shader变体，从而动态地改变着色器功能。

粒子
单个特效渲染数据限制：
小型特效（如受击特效、Buff特效）的面数和顶点数在80以内，贴图在64*64以内，材质数2个以内。
中型特效（如技能特效）的面数和顶点数在150以内，贴图在128*128以内，材质数4个以内。
大型特效（如全局特效、大火球）的面数和顶点数在300以内，贴图在256*256以内，材质数6个以内。

1. 少用Alpha Blend。开启Alpha Blend了一般会关闭深度测试，无法利用深度测试剔除多余片元，导致片元数量增加，造成过绘制。所以要尽量少用。
2. 禁用Alpha Test。现代部分移动端GPU采用了特殊的渲染优化方式，如PowerVR采用Tile Based Deferred Rendering方式（下图右），而Alpha Test会破坏Early-Z优化技术，可用Alpha Blend代替。更多看这里。

https://blog.csdn.net/leonwei/article/details/77387357
GPU Skin还可以结合GPU Instance技术，以渲染大量相同角色的骨骼动画。

　　引发卡顿的原因有很多，但主要有：
　　1. 突发大量IO。
　　2. 短时大量内存操作。
　　3. 渲染物体突然暴涨。
　　4. 触发GC。
　　5. 加载资源量多的场景或界面。
　　6. 触发过多过复杂的逻辑。


Rawlmage组件和Image组件类似，都是UGUI系统下的图像组件。针对于Texutre设置的TextureType来说，Image组件只能使用TextureType为Sprite类型的资源；而RawImage使用的纹理资源可以设置为任意Type，需要注意的是，如果在RawImage组件内拖入的是TextureType为Sprite的纹理，其实是引用了Sprite内的原始纹理。从UGUI源码中看，RawImage类型的API函数很少，功能比较简单，而Image类型的功能较复杂。

Unity windows平台pc包exe文件的运行log或者崩溃日志位置
Windows C:\Users\username\AppData\LocalLow\CompanyName\ProductName\Player.log
或者
Windows C:\Users\username\AppData\LocalLow\CompanyName\ProductName\output_log.txt


比较TCP和UDP，为什么TCP要三次握手及为什么四次挥手，如何实现可靠有序UDP topk问题


lamda 协程优缺点

xlua gc

spine优化

Unity匿名函数的堆内存优化
我们先从没有产生alloc的函数开始分析。 这个函数没有使用外部变量，那么编译器就会把这个函数变成一个静态函数。 在调用的时候才会new出来，但一旦new出来之后就不会再new了，这就是它为什么没有alloc的原因。
其他会产生的alloc的函数，都是成员函数（包括匿名的，也变成成员的了），所以每次都会new一个action对象。
当不使用外部变量的匿名函数时，编译器会把这个函数变成静态函数，在首次调用时初始化，之后就再也不会new新的对象。 当使用外部变量时，每次调用都会生成一个临时action变量，这个就是alloc的原因。




